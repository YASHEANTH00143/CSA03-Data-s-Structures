#include <stdio.h>
#include <stdlib.h>
struct Node {
    int key;
    struct Node *left;
    struct Node *right;
};
struct Node *newNode(int item) {
    struct Node *temp = (struct Node *)malloc(sizeof(struct Node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}
struct Node *insert(struct Node *node, int key) {
    if (node == NULL) return newNode(key);
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    return node;
}
void inOrder(struct Node *root) {
    if (root != NULL) {
        inOrder(root->left);
        printf("%d ", root->key);
        inOrder(root->right);
    }
}
void Postorder(struct Node *root)  
{  
    if (root == NULL)  
        return;  
    Postorder(root->left);  
    Postorder(root->right);  
    printf(" %d ", root->key);  
} 
void Preorder(struct Node* root)  
{  
    if (root == NULL)  
        return;  
    printf(" %d ", root->key);  
    Preorder(root->left);  
    Preorder(root->right);  
}    
int main() {
    struct Node *root = NULL;
    root = insert(root, 33);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
    printf("Inorder traversal of the BST: ");
    inOrder(root);
    printf("\npostorder traversal of the BST: ");
    Postorder(root);
     printf("\nPreorder traversal of the BST: ");
    Preorder(root);
    return 0;
}
